/* tslint:disable */
/* eslint-disable */
/**
 * Hey Bible App API
 * Public API for accessing Bible app data
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiImagesGet200Response,
  ApiNotesGet200Response,
  ApiVersesGet200Response,
} from '../models/index';
import {
    ApiImagesGet200ResponseFromJSON,
    ApiImagesGet200ResponseToJSON,
    ApiNotesGet200ResponseFromJSON,
    ApiNotesGet200ResponseToJSON,
    ApiVersesGet200ResponseFromJSON,
    ApiVersesGet200ResponseToJSON,
} from '../models/index';

export interface ApiImagesGetRequest {
    id?: number;
    limit?: number;
    offset?: number;
}

export interface ApiNotesGetRequest {
    id?: number;
    limit?: number;
    offset?: number;
}

export interface ApiVersesGetRequest {
    id?: number;
    limit?: number;
    offset?: number;
}

/**
 * HeyBibleApi - interface
 * 
 * @export
 * @interface HeyBibleApiInterface
 */
export interface HeyBibleApiInterface {
    /**
     * Retrieve a list of images with their associated verses, or a specific image if ID is provided
     * @summary Get user\'s images
     * @param {number} [id] Specific image ID to retrieve (returns signed URL)
     * @param {number} [limit] Number of images to return (ignored if ID is specified)
     * @param {number} [offset] Number of images to skip (ignored if ID is specified)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeyBibleApiInterface
     */
    apiImagesGetRaw(requestParameters: ApiImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiImagesGet200Response>>;

    /**
     * Retrieve a list of images with their associated verses, or a specific image if ID is provided
     * Get user\'s images
     */
    apiImagesGet(requestParameters: ApiImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiImagesGet200Response>;

    /**
     * Retrieve all notes with their associated verses for the user, or a specific note if ID is provided
     * @summary Get notes
     * @param {number} [id] Specific note ID to retrieve
     * @param {number} [limit] Number of notes to return (ignored if ID is specified)
     * @param {number} [offset] Number of notes to skip (ignored if ID is specified)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeyBibleApiInterface
     */
    apiNotesGetRaw(requestParameters: ApiNotesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiNotesGet200Response>>;

    /**
     * Retrieve all notes with their associated verses for the user, or a specific note if ID is provided
     * Get notes
     */
    apiNotesGet(requestParameters: ApiNotesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiNotesGet200Response>;

    /**
     * Retrieve all verses for the user, or a specific verse if ID is provided
     * @summary Get verses
     * @param {number} [id] Specific verse ID to retrieve
     * @param {number} [limit] Number of verses to return (ignored if ID is specified)
     * @param {number} [offset] Number of verses to skip (ignored if ID is specified)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeyBibleApiInterface
     */
    apiVersesGetRaw(requestParameters: ApiVersesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiVersesGet200Response>>;

    /**
     * Retrieve all verses for the user, or a specific verse if ID is provided
     * Get verses
     */
    apiVersesGet(requestParameters: ApiVersesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiVersesGet200Response>;

}

/**
 * 
 */
export class HeyBibleApi extends runtime.BaseAPI implements HeyBibleApiInterface {

    /**
     * Retrieve a list of images with their associated verses, or a specific image if ID is provided
     * Get user\'s images
     */
    async apiImagesGetRaw(requestParameters: ApiImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiImagesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Hey-Bible-Api-Key"] = await this.configuration.apiKey("X-Hey-Bible-Api-Key"); // ApiKeyAuth authentication
        }


        let urlPath = `/api/images`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiImagesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of images with their associated verses, or a specific image if ID is provided
     * Get user\'s images
     */
    async apiImagesGet(requestParameters: ApiImagesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiImagesGet200Response> {
        const response = await this.apiImagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all notes with their associated verses for the user, or a specific note if ID is provided
     * Get notes
     */
    async apiNotesGetRaw(requestParameters: ApiNotesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiNotesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Hey-Bible-Api-Key"] = await this.configuration.apiKey("X-Hey-Bible-Api-Key"); // ApiKeyAuth authentication
        }


        let urlPath = `/api/notes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiNotesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all notes with their associated verses for the user, or a specific note if ID is provided
     * Get notes
     */
    async apiNotesGet(requestParameters: ApiNotesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiNotesGet200Response> {
        const response = await this.apiNotesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all verses for the user, or a specific verse if ID is provided
     * Get verses
     */
    async apiVersesGetRaw(requestParameters: ApiVersesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiVersesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Hey-Bible-Api-Key"] = await this.configuration.apiKey("X-Hey-Bible-Api-Key"); // ApiKeyAuth authentication
        }


        let urlPath = `/api/verses`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiVersesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all verses for the user, or a specific verse if ID is provided
     * Get verses
     */
    async apiVersesGet(requestParameters: ApiVersesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiVersesGet200Response> {
        const response = await this.apiVersesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
