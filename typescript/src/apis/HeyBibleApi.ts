/* tslint:disable */
/* eslint-disable */
/**
 * Hey Bible App API
 * Public API for accessing Bible app data
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ImagesGet200Response,
  NotesGet200Response,
  VersesGet200Response,
} from '../models/index';
import {
    ImagesGet200ResponseFromJSON,
    ImagesGet200ResponseToJSON,
    NotesGet200ResponseFromJSON,
    NotesGet200ResponseToJSON,
    VersesGet200ResponseFromJSON,
    VersesGet200ResponseToJSON,
} from '../models/index';

export interface ImagesGetRequest {
    id?: number;
    limit?: number;
    offset?: number;
}

export interface NotesGetRequest {
    id?: number;
    limit?: number;
    offset?: number;
}

export interface VersesGetRequest {
    id?: number;
    limit?: number;
    offset?: number;
}

/**
 * HeyBibleApi - interface
 * 
 * @export
 * @interface HeyBibleApiInterface
 */
export interface HeyBibleApiInterface {
    /**
     * Retrieve a list of images with their associated verses, or a specific image if ID is provided
     * @summary Get user\'s images
     * @param {number} [id] Specific image ID to retrieve (returns signed URL)
     * @param {number} [limit] Number of images to return (ignored if ID is specified)
     * @param {number} [offset] Number of images to skip (ignored if ID is specified)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeyBibleApiInterface
     */
    imagesGetRaw(requestParameters: ImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImagesGet200Response>>;

    /**
     * Retrieve a list of images with their associated verses, or a specific image if ID is provided
     * Get user\'s images
     */
    imagesGet(requestParameters: ImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImagesGet200Response>;

    /**
     * Retrieve all notes with their associated verses for the user, or a specific note if ID is provided
     * @summary Get notes
     * @param {number} [id] Specific note ID to retrieve
     * @param {number} [limit] Number of notes to return (ignored if ID is specified)
     * @param {number} [offset] Number of notes to skip (ignored if ID is specified)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeyBibleApiInterface
     */
    notesGetRaw(requestParameters: NotesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotesGet200Response>>;

    /**
     * Retrieve all notes with their associated verses for the user, or a specific note if ID is provided
     * Get notes
     */
    notesGet(requestParameters: NotesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotesGet200Response>;

    /**
     * Retrieve all verses for the user, or a specific verse if ID is provided
     * @summary Get verses
     * @param {number} [id] Specific verse ID to retrieve
     * @param {number} [limit] Number of verses to return (ignored if ID is specified)
     * @param {number} [offset] Number of verses to skip (ignored if ID is specified)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeyBibleApiInterface
     */
    versesGetRaw(requestParameters: VersesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersesGet200Response>>;

    /**
     * Retrieve all verses for the user, or a specific verse if ID is provided
     * Get verses
     */
    versesGet(requestParameters: VersesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersesGet200Response>;

}

/**
 * 
 */
export class HeyBibleApi extends runtime.BaseAPI implements HeyBibleApiInterface {

    /**
     * Retrieve a list of images with their associated verses, or a specific image if ID is provided
     * Get user\'s images
     */
    async imagesGetRaw(requestParameters: ImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImagesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Hey-Bible-Api-Key"] = await this.configuration.apiKey("X-Hey-Bible-Api-Key"); // ApiKeyAuth authentication
        }


        let urlPath = `/images`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImagesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of images with their associated verses, or a specific image if ID is provided
     * Get user\'s images
     */
    async imagesGet(requestParameters: ImagesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImagesGet200Response> {
        const response = await this.imagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all notes with their associated verses for the user, or a specific note if ID is provided
     * Get notes
     */
    async notesGetRaw(requestParameters: NotesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Hey-Bible-Api-Key"] = await this.configuration.apiKey("X-Hey-Bible-Api-Key"); // ApiKeyAuth authentication
        }


        let urlPath = `/notes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all notes with their associated verses for the user, or a specific note if ID is provided
     * Get notes
     */
    async notesGet(requestParameters: NotesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotesGet200Response> {
        const response = await this.notesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all verses for the user, or a specific verse if ID is provided
     * Get verses
     */
    async versesGetRaw(requestParameters: VersesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VersesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Hey-Bible-Api-Key"] = await this.configuration.apiKey("X-Hey-Bible-Api-Key"); // ApiKeyAuth authentication
        }


        let urlPath = `/verses`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all verses for the user, or a specific verse if ID is provided
     * Get verses
     */
    async versesGet(requestParameters: VersesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VersesGet200Response> {
        const response = await this.versesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
